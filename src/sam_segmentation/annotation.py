"""
annotation.py

This script provides image annotation using YOLOv8 and Segment Anything Model (SAM).
It provides a command-line interface for annotating a folder of images with bounding boxes
generated by YOLOv8 and segmentation masks produced by the SAM model.

Usage:
    python annotation.py [DATA_DIR] [FOLDER] [YOLO_CHECKPOINT] [SAM_CHECKPOINT] [SAM_MODEL_TYPE]

Arguments:
    - DATA_DIR (str): Directory containing the input images for annotation.
    - FOLDER (str): Name of the folder containing the images.
    - YOLO_CHECKPOINT (str): Path to the custom YOLOv8 checkpoint file.
    - SAM_CHECKPOINT (str): Path to the Segment Anything Model (SAM) checkpoint file.
    - SAM_MODEL_TYPE (str): Type of the SAM model, choose from ["vit_b", "vit_l", "vit_h"].

Optional Arguments:
    - --target_length (int): Target length for resizing the longest side of the image (default: 1024).
    - --narrowing (float): Narrowing factor for SAM masks (default: 0.20).
    - --erode_iterations (int): Number of iterations for eroding the final mask (default: 1).
    - --processes_num (int): Number of parallel processes for segmentation (default: 0).
    - --device (str): Device for processing ("cpu" or "cuda") (default: "cpu").

Notes:
    - Progress information is printed during annotation.
    - Segmented masks are saved to the output directory.
    - If processes_num is set to 0, sequential annotation is performed.
    - If processes_num is greater than 0, parallel annotation is performed using concurrent.futures (only on cpu).
"""

import os
import sys

import torch

from src.sam_segmentation.yolo import load_yolov8_detector
from src.sam_segmentation.sam import load_sam_predictor, segment_images_from_folder


def annotation(
        data_dir: str, folder: str,
        custom_yolo_checkpoint_path: str, sam_checkpoint: str, sam_model_type: str,
        target_length: int = 1024, narrowing: float = 0.20, erode_iterations: int = 1, processes_num: int = 0,
        device: str = "cpu"
):
    """
    Perform annotation on images in a folder using YOLOv8 and Segment Anything Model (SAM).
    Args:
        data_dir (str): Directory containing the data.
        folder (str): Name of the folder containing the images for annotation.
        custom_yolo_checkpoint_path (str): Path to the custom YOLOv8 checkpoint file.
        sam_checkpoint (str): Path to the Segment Anything Model (SAM) checkpoint file.
        sam_model_type (str): Type of the SAM model. Choose from ["vit_b", "vit_l", "vit_h"].
        target_length (int, optional): Target length for resizing the longest side of the image.
            Defaults to 1024 pixels.
        narrowing (float, optional): Narrowing factor for SAM masks. Defaults to 0.20.
        erode_iterations (int, optional): Number of iterations for eroding the final mask. Defaults to 1.
        processes_num (int, optional): Number of parallel processes for segmentation.
            Defaults to 0 (sequential processing).
        device (str, optional): Device for processing ("cpu" or "cuda"). Defaults to "cpu".

    Returns:
        None

    Notes:
        - Prints progress information during annotation.
        - Saves the segmented masks to the output directory.
        - If processes_num is set to 0, performs sequential annotation.
        - If processes_num is greater than 0, performs parallel annotation using concurrent.futures.
    """
    if sam_model_type not in ["vit_b", "vit_l", "vit_h"]:
        print("Undefined sam model type")
        # TODO: Throw error
        return

    detector = load_yolov8_detector(custom_yolo_checkpoint_path)

    if device != "cpu":
        torch.cuda.empty_cache()
        torch.backends.cuda.matmul.allow_tf32 = False
        torch.backends.cudnn.benchmark = True

    predictor = load_sam_predictor(checkpoint_path=sam_checkpoint, model_type=sam_model_type, device=device)

    source_dir = os.path.join(data_dir, folder)
    output_dir = os.path.join(data_dir, folder + "_masks")

    segment_images_from_folder(
        source_dir,
        output_dir,
        detector, predictor,
        target_length=target_length,
        narrowing=narrowing,
        erode_iterations=erode_iterations,
        processes_num=processes_num
    )


if __name__ == "__main__":
    # TODO: add argparser

    data_dir = sys.argv[1]
    folder = sys.argv[2]

    custom_yolo_checkpoint_path = sys.argv[3]
    sam_checkpoint = sys.argv[4]
    sam_model_type = sys.argv[5]

    target_length = 1024
    narrowing = 0.20
    erode_iterations = 1
    processes_num = 0

    device = "cuda" if torch.cuda.is_available() else "cpu"

    annotation(
        data_dir, folder,
        custom_yolo_checkpoint_path, sam_checkpoint, sam_model_type,
        target_length=target_length,  narrowing=narrowing,
        erode_iterations=erode_iterations, processes_num=processes_num,
        device=device
    )
